definitions:
  entity.BatchCreateUserBehaviorRequest:
    properties:
      events:
        items:
          $ref: '#/definitions/entity.CreateUserBehaviorRequest'
        type: array
    required:
    - events
    type: object
  entity.CreateExtensionUserRequest:
    properties:
      username:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - username
    type: object
  entity.CreateUserBehaviorRequest:
    properties:
      key:
        type: string
      sessionId:
        type: string
      ts:
        type: string
      type:
        type: string
      url:
        type: string
      userId:
        type: string
      userName:
        type: string
      x:
        type: integer
      "y":
        type: integer
    required:
    - sessionId
    - ts
    - type
    - url
    type: object
  entity.ExtensionUser:
    properties:
      apiKey:
        type: string
      createdAt:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      lastUsedAt:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  entity.ExtensionUserPublic:
    properties:
      createdAt:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      lastUsedAt:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  entity.ExtensionUserStats:
    properties:
      activeUsers:
        type: integer
      inactiveUsers:
        type: integer
      totalUsers:
        type: integer
      usersUsedThisWeek:
        type: integer
      usersUsedToday:
        type: integer
    type: object
  entity.RegenerateAPIKeyResponse:
    properties:
      apiKey:
        type: string
      id:
        type: string
    type: object
  entity.SessionSummary:
    properties:
      duration:
        description: в секундах
        type: integer
      endTime:
        type: string
      eventsCount:
        type: integer
      sessionId:
        type: string
      startTime:
        type: string
      urls:
        items:
          type: string
        type: array
      userId:
        type: string
      userName:
        type: string
    type: object
  entity.URLStats:
    properties:
      count:
        type: integer
      url:
        type: string
    type: object
  entity.UpdateExtensionUserRequest:
    properties:
      isActive:
        type: boolean
      username:
        maxLength: 100
        minLength: 3
        type: string
    type: object
  entity.UserBehavior:
    properties:
      createdAt:
        type: string
      id:
        type: string
      key:
        type: string
      sessionId:
        type: string
      ts:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      url:
        type: string
      userId:
        type: string
      userName:
        type: string
      x:
        type: integer
      "y":
        type: integer
    required:
    - sessionId
    - ts
    - type
    - url
    type: object
  entity.UserBehaviorStats:
    properties:
      eventsByType:
        additionalProperties:
          type: integer
        type: object
      popularUrls:
        items:
          $ref: '#/definitions/entity.URLStats'
        type: array
      totalEvents:
        type: integer
      uniqueSessions:
        type: integer
      uniqueUsers:
        type: integer
    type: object
  request.CreateUserWithPassword:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  response.User:
    properties:
      created_at:
        type: string
      id:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  wrapper.ErrorWrapper:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  wrapper.ResponseWrapper:
    properties:
      data: {}
      success:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /behaviors:
    get:
      consumes:
      - application/json
      description: Get user behavior events with optional filters
      parameters:
      - description: User ID
        in: query
        name: userId
        type: string
      - description: Session ID
        in: query
        name: sessionId
        type: string
      - description: Event type
        in: query
        name: eventType
        type: string
      - description: URL (partial match)
        in: query
        name: url
        type: string
      - description: Start time (RFC3339 format)
        in: query
        name: startTime
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: endTime
        type: string
      - description: 'Limit (default: 100, max: 1000)'
        in: query
        name: limit
        type: integer
      - description: 'Offset (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.UserBehavior'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get user behaviors
      tags:
      - user-behaviors
    post:
      consumes:
      - application/json
      description: Create a single user behavior event
      parameters:
      - description: Behavior data
        in: body
        name: behavior
        required: true
        schema:
          $ref: '#/definitions/entity.CreateUserBehaviorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.UserBehavior'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Create user behavior event
      tags:
      - user-behaviors
  /behaviors/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific user behavior event
      parameters:
      - description: Behavior ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Delete behavior
      tags:
      - user-behaviors
    get:
      consumes:
      - application/json
      description: Get a specific user behavior event by ID
      parameters:
      - description: Behavior ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.UserBehavior'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get behavior by ID
      tags:
      - user-behaviors
  /behaviors/batch:
    post:
      consumes:
      - application/json
      description: Create multiple user behavior events in one request
      parameters:
      - description: Behaviors data
        in: body
        name: behaviors
        required: true
        schema:
          $ref: '#/definitions/entity.BatchCreateUserBehaviorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Batch create user behavior events
      tags:
      - user-behaviors
  /behaviors/sessions/{sessionId}:
    get:
      consumes:
      - application/json
      description: Get summary information about a specific session
      parameters:
      - description: Session ID
        in: path
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.SessionSummary'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get session summary
      tags:
      - user-behaviors
  /behaviors/stats:
    get:
      consumes:
      - application/json
      description: Get statistics about user behaviors
      parameters:
      - description: User ID
        in: query
        name: userId
        type: string
      - description: Session ID
        in: query
        name: sessionId
        type: string
      - description: Event type
        in: query
        name: eventType
        type: string
      - description: URL (partial match)
        in: query
        name: url
        type: string
      - description: Start time (RFC3339 format)
        in: query
        name: startTime
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: endTime
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.UserBehaviorStats'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get behavior statistics
      tags:
      - user-behaviors
  /behaviors/users/{userId}/sessions:
    get:
      consumes:
      - application/json
      description: Get all sessions for a specific user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: 'Limit (default: 50, max: 200)'
        in: query
        name: limit
        type: integer
      - description: 'Offset (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.SessionSummary'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get user sessions
      tags:
      - user-behaviors
  /extension-users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an extension user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Delete extension user
      tags:
      - extension
    get:
      consumes:
      - application/json
      description: Get a specific extension user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.ExtensionUserPublic'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get extension user by ID
      tags:
      - extension
    put:
      consumes:
      - application/json
      description: Update extension user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateExtensionUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.ExtensionUserPublic'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Update extension user
      tags:
      - extension
  /extension-users/{id}/regenerate-key:
    post:
      consumes:
      - application/json
      description: Regenerate API key for extension user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.RegenerateAPIKeyResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Regenerate API key
      tags:
      - extension
  /extension-users/stats:
    get:
      consumes:
      - application/json
      description: Get statistics about extension users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.ExtensionUserStats'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get extension users statistics
      tags:
      - extension
  /extension/username/{username}:
    get:
      consumes:
      - application/json
      description: Get a specific extension user by their username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.ExtensionUserPublic'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get extension user by username
      tags:
      - extension
  /users:
    get:
      consumes:
      - application/json
      description: Get list of extension users with optional filters
      parameters:
      - description: Filter by username
        in: query
        name: username
        type: string
      - description: Filter by active status
        in: query
        name: isActive
        type: boolean
      - description: 'Limit (default: 50, max: 200)'
        in: query
        name: limit
        type: integer
      - description: 'Offset (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.ExtensionUserPublic'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get all extension users
      tags:
      - extension
  /users/auth:
    post:
      consumes:
      - application/json
      description: Create a new user or authenticate an existing user with password
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.CreateUserWithPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/response.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Create or authenticate user with password
      tags:
      - users
  /users/auth/validate:
    post:
      consumes:
      - application/json
      description: Validate extension user API key
      parameters:
      - description: API Key
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.ExtensionUserPublic'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Validate API key
      tags:
      - extension
  /users/generate:
    post:
      consumes:
      - application/json
      description: Create a new extension user with API key
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.CreateExtensionUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.ExtensionUser'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Create extension user
      tags:
      - extension
  /users/profile:
    get:
      consumes:
      - application/json
      description: Get user by ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/response.User'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get user by ID
      tags:
      - users
swagger: "2.0"
