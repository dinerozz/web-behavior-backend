definitions:
  entity.AIAnalyticsRequest:
    properties:
      deep_work:
        $ref: '#/definitions/entity.DeepWorkData'
      domains:
        items:
          type: string
        minItems: 1
        type: array
      domains_count:
        minimum: 1
        type: integer
      engagement_rate:
        maximum: 100
        minimum: 0
        type: number
      period:
        type: string
      tracked_hours:
        minimum: 0
        type: number
      user_id:
        type: string
    required:
    - deep_work
    - domains
    - domains_count
    - engagement_rate
    - tracked_hours
    type: object
  entity.BatchCreateUserBehaviorRequest:
    properties:
      events:
        items:
          $ref: '#/definitions/entity.CreateUserBehaviorRequest'
        type: array
    required:
    - events
    type: object
  entity.CreateExtensionUserRequest:
    properties:
      organization_id:
        type: string
      username:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - username
    type: object
  entity.CreateUserBehaviorRequest:
    properties:
      key:
        type: string
      sessionId:
        type: string
      ts:
        type: string
      type:
        type: string
      url:
        type: string
      userId:
        type: string
      x:
        type: integer
      "y":
        type: integer
    required:
    - sessionId
    - ts
    - type
    type: object
  entity.DeepWorkData:
    properties:
      average_minutes:
        description: средняя длительность сессии
        type: number
      deep_work_rate:
        description: '% от tracked time'
        type: number
      longest_minutes:
        description: самая длинная сессия
        type: number
      sessions_count:
        description: количество deep work сессий
        type: integer
      top_domains:
        description: топ доменов для deep work
        items:
          $ref: '#/definitions/entity.DeepWorkDomain'
        type: array
      total_hours:
        description: общее время в часах
        type: number
      total_minutes:
        description: общее время в deep work
        type: number
    type: object
  entity.DeepWorkDomain:
    properties:
      domain:
        type: string
      minutes:
        type: number
      sessions:
        type: integer
    type: object
  entity.DetailedAnalysis:
    properties:
      behavior_insights:
        items:
          type: string
        type: array
      domain_breakdown:
        $ref: '#/definitions/entity.DomainBreakdown'
      key_findings:
        items:
          type: string
        type: array
      productivity_score:
        $ref: '#/definitions/entity.ProductivityScore'
    type: object
  entity.DomainAnalysis:
    properties:
      analysis:
        $ref: '#/definitions/entity.DetailedAnalysis'
      focus_insight:
        type: string
      focus_level:
        type: string
      recommendations:
        items:
          type: string
        type: array
      work_pattern:
        type: string
    type: object
  entity.DomainBreakdown:
    properties:
      communication:
        description: Gmail, Telegram, etc.
        items:
          type: string
        type: array
      development:
        description: localhost, CodeSandbox, etc.
        items:
          type: string
        type: array
      distractions:
        description: YouTube, social, etc.
        items:
          type: string
        type: array
      research:
        description: Stack Overflow, docs, etc.
        items:
          type: string
        type: array
      work_tools:
        description: GitHub, Jira, etc.
        items:
          type: string
        type: array
    type: object
  entity.EventTypes:
    properties:
      amount:
        type: integer
      event:
        type: string
    type: object
  entity.ExtensionUser:
    properties:
      apiKey:
        type: string
      createdAt:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      lastUsedAt:
        type: string
      organization:
        $ref: '#/definitions/entity.OrganizationInfo'
      organization_id:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  entity.ExtensionUserPublic:
    properties:
      createdAt:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      lastUsedAt:
        type: string
      organization:
        $ref: '#/definitions/entity.OrganizationInfo'
      updatedAt:
        type: string
      username:
        type: string
    type: object
  entity.ExtensionUserStats:
    properties:
      activeUsers:
        type: integer
      inactiveUsers:
        type: integer
      totalUsers:
        type: integer
      usersUsedThisWeek:
        type: integer
      usersUsedToday:
        type: integer
    type: object
  entity.FocusLevelResponse:
    properties:
      focus_level:
        type: string
      insight:
        type: string
      method:
        description: '"ai" или "fallback"'
        type: string
      timestamp:
        type: string
    type: object
  entity.OrganizationInfo:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  entity.PaginatedResponse:
    properties:
      data: {}
      pagination:
        $ref: '#/definitions/entity.PaginationInfo'
      success:
        type: boolean
    type: object
  entity.PaginationInfo:
    properties:
      page:
        type: integer
      per_page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  entity.PeriodInfo:
    properties:
      description:
        type: string
      key:
        type: string
      label:
        type: string
    type: object
  entity.ProductivityScore:
    properties:
      balance:
        description: work/life domains
        type: integer
      efficiency:
        description: engagement rate
        type: integer
      explanation:
        description: краткое объяснение счета
        type: string
      focus:
        description: на основе deep work
        type: integer
      overall:
        description: 0-100
        type: integer
    type: object
  entity.RegenerateAPIKeyResponse:
    properties:
      apiKey:
        type: string
      id:
        type: string
    type: object
  entity.SessionSummary:
    properties:
      duration:
        description: в секундах
        type: number
      endTime:
        type: string
      eventsCount:
        type: integer
      sessionId:
        type: string
      startTime:
        type: string
      urls:
        items:
          type: string
        type: array
      userId:
        type: string
      userName:
        type: string
    type: object
  entity.URLStats:
    properties:
      count:
        type: integer
      url:
        type: string
    type: object
  entity.UpdateExtensionUserRequest:
    properties:
      apiKey:
        type: string
      isActive:
        type: boolean
      organization_id:
        type: string
      username:
        maxLength: 100
        minLength: 3
        type: string
    type: object
  entity.UserBehavior:
    properties:
      createdAt:
        type: string
      id:
        type: string
      key:
        type: string
      sessionId:
        type: string
      ts:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      url:
        type: string
      userId:
        type: string
      userName:
        type: string
      x:
        type: integer
      "y":
        type: integer
    required:
    - sessionId
    - ts
    - type
    - url
    type: object
  entity.UserBehaviorStats:
    properties:
      eventsByType:
        additionalProperties:
          type: integer
        type: object
      popularUrls:
        items:
          $ref: '#/definitions/entity.URLStats'
        type: array
      totalEvents:
        type: integer
      uniqueSessions:
        type: integer
      uniqueUsers:
        type: integer
    type: object
  entity.UserEventsCountResponse:
    properties:
      end_time:
        type: string
      events:
        items:
          $ref: '#/definitions/entity.EventTypes'
        type: array
      start_time:
        type: string
      total:
        type: integer
      user_id:
        type: string
    type: object
  request.AddUserToOrganization:
    properties:
      role:
        enum:
        - admin
        - member
        - viewer
        type: string
      user_id:
        type: string
    required:
    - role
    - user_id
    type: object
  request.CreateOrganization:
    properties:
      description:
        maxLength: 255
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - name
    type: object
  request.CreateUserWithPassword:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  request.UpdateOrganization:
    properties:
      description:
        maxLength: 255
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - name
    type: object
  response.Organization:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  response.OrganizationMember:
    properties:
      joined_at:
        type: string
      role:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  response.OrganizationWithMembers:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      members:
        items:
          $ref: '#/definitions/response.OrganizationMember'
        type: array
      name:
        type: string
      updated_at:
        type: string
    type: object
  response.User:
    properties:
      created_at:
        type: string
      id:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  response.UserOrgAccess:
    properties:
      description:
        type: string
      id:
        type: string
      joined_at:
        type: string
      name:
        type: string
      role:
        type: string
    type: object
  response.UserOrganizations:
    properties:
      organizations:
        items:
          $ref: '#/definitions/response.UserOrgAccess'
        type: array
      user_id:
        type: string
    type: object
  wrapper.ErrorWrapper:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  wrapper.PaginatedResponseWrapper:
    properties:
      data: {}
      meta:
        $ref: '#/definitions/entity.PaginationInfo'
      success:
        type: boolean
    type: object
  wrapper.ResponseWrapper:
    properties:
      data: {}
      success:
        type: boolean
    type: object
  wrapper.SuccessWrapper:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /admin/users/login:
    post:
      consumes:
      - application/json
      description: Authenticate an existing user with username and password
      parameters:
      - description: Login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.CreateUserWithPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Authenticate user with password
      tags:
      - /api/v1/admin/users
  /admin/users/register:
    post:
      consumes:
      - application/json
      description: Create a new user with password - only available for admin users
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.CreateUserWithPassword'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/response.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Create new user with password (Admin only)
      tags:
      - /api/v1/admin/users
  /ai-analytics/domain-usage:
    post:
      consumes:
      - application/json
      description: Get AI-powered analysis of user's domain usage patterns, productivity
        insights, and recommendations
      parameters:
      - description: Analytics request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.AIAnalyticsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.DomainAnalysis'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Analyze domain usage with AI
      tags:
      - /api/v1/admin/ai-analytics
  /ai-analytics/focus-level:
    get:
      consumes:
      - application/json
      description: Get basic focus level assessment based on domain count (fallback
        method). Results are cached in Redis for 6 hours.
      parameters:
      - description: Number of unique domains
        in: query
        name: domains_count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.FocusLevelResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get focus level without AI (with Redis caching)
      tags:
      - /api/v1/admin/ai-analytics
  /behaviors:
    get:
      consumes:
      - application/json
      description: Get user behavior events with optional filters
      parameters:
      - description: User ID
        in: query
        name: userId
        type: string
      - description: Session ID
        in: query
        name: sessionId
        type: string
      - description: Event type
        in: query
        name: eventType
        type: string
      - description: URL (partial match)
        in: query
        name: url
        type: string
      - description: Start time (RFC3339 format)
        in: query
        name: startTime
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: endTime
        type: string
      - description: 'Time period filter: ''today'', ''week'', ''month'', ''year'''
        in: query
        name: period
        type: string
      - description: Page number (starts from 1)
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 1000)'
        in: query
        name: per_page
        type: integer
      - description: Limit (deprecated, use per_page)
        in: query
        name: limit
        type: integer
      - description: Offset (deprecated, use page)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/entity.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.UserBehavior'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get user behaviors
      tags:
      - /api/v1/admin/behaviors
    post:
      consumes:
      - application/json
      description: Create a single user behavior event
      parameters:
      - description: Behavior data
        in: body
        name: behavior
        required: true
        schema:
          $ref: '#/definitions/entity.CreateUserBehaviorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.UserBehavior'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Create user behavior event
      tags:
      - /api/v1/inayla/behaviors
  /behaviors/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific user behavior event
      parameters:
      - description: Behavior ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Delete behavior
      tags:
      - /api/v1/admin/behaviors
    get:
      consumes:
      - application/json
      description: Get a specific user behavior event by ID
      parameters:
      - description: Behavior ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.UserBehavior'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get behavior by ID
      tags:
      - /api/v1/admin/behaviors
  /behaviors/batch:
    post:
      consumes:
      - application/json
      description: Create multiple user behavior events in one request
      parameters:
      - description: Behaviors data
        in: body
        name: behaviors
        required: true
        schema:
          $ref: '#/definitions/entity.BatchCreateUserBehaviorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Batch create user behavior events
      tags:
      - /api/v1/inayla/behaviors
  /behaviors/periods:
    get:
      consumes:
      - application/json
      description: Get list of available time period filters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.PeriodInfo'
                  type: array
              type: object
      summary: Get available time periods
      tags:
      - /api/v1/admin/behaviors
  /behaviors/sessions/{sessionId}:
    get:
      consumes:
      - application/json
      description: Get summary information about a specific session
      parameters:
      - description: Session ID
        in: path
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.SessionSummary'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get session summary
      tags:
      - /api/v1/admin/behaviors
  /behaviors/stats:
    get:
      consumes:
      - application/json
      description: Get statistics about user behaviors
      parameters:
      - description: User ID
        in: query
        name: userId
        type: string
      - description: Session ID
        in: query
        name: sessionId
        type: string
      - description: Event type
        in: query
        name: eventType
        type: string
      - description: URL (partial match)
        in: query
        name: url
        type: string
      - description: Start time (RFC3339 format)
        in: query
        name: startTime
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: endTime
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.UserBehaviorStats'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get behavior statistics
      tags:
      - /api/v1/admin/behaviors
  /behaviors/user-events:
    get:
      consumes:
      - application/json
      description: Get statistics about user behaviors
      parameters:
      - description: User ID
        in: query
        name: userId
        type: string
      - description: Start time (RFC3339 format)
        in: query
        name: startTime
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: endTime
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.UserEventsCountResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get behavior statistics
      tags:
      - /api/v1/admin/behaviors
  /behaviors/users/{userId}/sessions:
    get:
      consumes:
      - application/json
      description: Get all sessions for a specific user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 50, max: 200)'
        in: query
        name: per_page
        type: integer
      - description: Limit (deprecated, use per_page)
        in: query
        name: limit
        type: integer
      - description: Offset (deprecated, use page)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.SessionSummary'
                  type: array
                pagination:
                  $ref: '#/definitions/entity.PaginationInfo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get user sessions
      tags:
      - /api/v1/admin/behaviors
  /extension/username/{username}:
    get:
      consumes:
      - application/json
      description: Get a specific extension user by their username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.ExtensionUserPublic'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get extension user by username
      tags:
      - /api/v1/admin/extension
  /extension/users:
    get:
      consumes:
      - application/json
      description: Get list of extension users with optional filters
      parameters:
      - description: Filter by username
        in: query
        name: username
        type: string
      - description: Filter by active status
        in: query
        name: isActive
        type: boolean
      - description: Page number (starts from 1)
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 200)'
        in: query
        name: per_page
        type: integer
      - description: Limit (deprecated, use per_page)
        in: query
        name: limit
        type: integer
      - description: Offset (deprecated, use page)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.PaginatedResponseWrapper'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.ExtensionUserPublic'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get all extension users
      tags:
      - /api/v1/admin/extension
  /extension/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an extension user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Delete extension user
      tags:
      - /api/v1/admin/extension
    get:
      consumes:
      - application/json
      description: Get a specific extension user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.ExtensionUserPublic'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get extension user by ID
      tags:
      - /api/v1/admin/extension
    put:
      consumes:
      - application/json
      description: Update extension user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateExtensionUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.ExtensionUserPublic'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Update extension user
      tags:
      - /api/v1/admin/extension
  /extension/users/{id}/regenerate-key:
    post:
      consumes:
      - application/json
      description: Regenerate API key for extension user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.RegenerateAPIKeyResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Regenerate API key
      tags:
      - /api/v1/admin/extension
  /extension/users/auth:
    post:
      consumes:
      - application/json
      description: Validate extension user API key
      parameters:
      - description: API Key
        in: header
        name: X-API-Key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.ExtensionUserPublic'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Validate API key
      tags:
      - /api/v1/inayla/extension
  /extension/users/generate:
    post:
      consumes:
      - application/json
      description: Create a new extension user with API key
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.CreateExtensionUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.ExtensionUser'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Create extension user
      tags:
      - /api/v1/admin/extension
  /extension/users/stats:
    get:
      consumes:
      - application/json
      description: Get statistics about extension users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/entity.ExtensionUserStats'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get extension users statistics
      tags:
      - /api/v1/admin/extension
  /organizations:
    get:
      consumes:
      - application/json
      description: Get organization details by ID (user must have access)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/response.Organization'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get organization by ID
      tags:
      - /api/v1/admin/organizations
    post:
      consumes:
      - application/json
      description: Create a new organization with the authenticated user as admin
      parameters:
      - description: Organization object
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/request.CreateOrganization'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/response.Organization'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Create new organization
      tags:
      - /api/v1/admin/organizations
  /organizations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete organization (admin only)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/wrapper.SuccessWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Delete organization
      tags:
      - /api/v1/admin/organizations
    get:
      consumes:
      - application/json
      description: Get organization details by ID (user must have access)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/response.Organization'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get organization by ID
      tags:
      - /api/v1/admin/organizations
    put:
      consumes:
      - application/json
      description: Update organization details (admin only)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Organization update object
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/request.UpdateOrganization'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/response.Organization'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Update organization
      tags:
      - /api/v1/admin/organizations
  /organizations/{id}/members:
    get:
      consumes:
      - application/json
      description: Get organization details including member list (user must have
        access)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/response.OrganizationWithMembers'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get organization with members
      tags:
      - /api/v1/admin/organizations
  /organizations/{id}/users:
    post:
      consumes:
      - application/json
      description: Add user to organization (admin only)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: User to add
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.AddUserToOrganization'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/wrapper.SuccessWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Add user to organization
      tags:
      - /api/v1/admin/organizations
  /organizations/{id}/users/{user_id}:
    delete:
      consumes:
      - application/json
      description: Remove user from organization (admin only)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID to remove
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/wrapper.SuccessWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Remove user from organization
      tags:
      - /api/v1/admin/organizations
  /organizations/{id}/users/{user_id}/role:
    put:
      consumes:
      - application/json
      description: Update user role in organization (admin only)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: New role
        enum:
        - admin
        - member
        - viewer
        in: query
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/wrapper.SuccessWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Update user role in organization
      tags:
      - /api/v1/admin/organizations
  /organizations/my:
    get:
      consumes:
      - application/json
      description: Get list of organizations user has access to
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/response.UserOrganizations'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get user's organizations
      tags:
      - /api/v1/admin/organizations
  /users/logout:
    post:
      consumes:
      - application/json
      description: Logout user by clearing authentication cookie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.SuccessWrapper'
            - properties:
                message:
                  type: string
              type: object
      summary: Logout user
      tags:
      - /api/v1/admin/users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Get user by ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  $ref: '#/definitions/response.User'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get user by ID
      tags:
      - /api/v1/admin/users
  /users/profile/full:
    get:
      consumes:
      - application/json
      description: Get user profile including their organizations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/wrapper.ResponseWrapper'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/wrapper.ErrorWrapper'
      summary: Get user profile with organizations
      tags:
      - /api/v1/admin/users
swagger: "2.0"
