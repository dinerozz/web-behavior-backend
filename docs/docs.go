// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/users": {
            "get": {
                "description": "Get list of all users (Super admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/response.User"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/admin/users/login": {
            "post": {
                "description": "Authenticate an existing user with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/users"
                ],
                "summary": "Authenticate user with password",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateUserWithPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/admin/users/register": {
            "post": {
                "description": "Create a new user with password - only available for admin users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/users"
                ],
                "summary": "Create new user with password (Admin only)",
                "parameters": [
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateUserWithPassword"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/ai-analytics/domain-usage": {
            "post": {
                "description": "Get AI-powered analysis of user's domain usage patterns, productivity insights, and recommendations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/ai-analytics"
                ],
                "summary": "Analyze domain usage with AI",
                "parameters": [
                    {
                        "description": "Analytics request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.AIAnalyticsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.DomainAnalysis"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/ai-analytics/focus-level": {
            "get": {
                "description": "Get basic focus level assessment based on domain count (fallback method). Results are cached in Redis for 6 hours.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/ai-analytics"
                ],
                "summary": "Get focus level without AI (with Redis caching)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of unique domains",
                        "name": "domains_count",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.FocusLevelResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/behaviors": {
            "get": {
                "description": "Get user behavior events with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/behaviors"
                ],
                "summary": "Get user behaviors",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "sessionId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Event type",
                        "name": "eventType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "URL (partial match)",
                        "name": "url",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339 format)",
                        "name": "startTime",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339 format)",
                        "name": "endTime",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Time period filter: 'today', 'week', 'month', 'year'",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (starts from 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 20, max: 1000)",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (deprecated, use per_page)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset (deprecated, use page)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entity.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entity.UserBehavior"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a single user behavior event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/inayla/behaviors"
                ],
                "summary": "Create user behavior event",
                "parameters": [
                    {
                        "description": "Behavior data",
                        "name": "behavior",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateUserBehaviorRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.UserBehavior"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/behaviors/batch": {
            "post": {
                "description": "Create multiple user behavior events in one request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/inayla/behaviors"
                ],
                "summary": "Batch create user behavior events",
                "parameters": [
                    {
                        "description": "Behaviors data",
                        "name": "behaviors",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.BatchCreateUserBehaviorRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/behaviors/periods": {
            "get": {
                "description": "Get list of available time period filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/behaviors"
                ],
                "summary": "Get available time periods",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entity.PeriodInfo"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/behaviors/sessions/{sessionId}": {
            "get": {
                "description": "Get summary information about a specific session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/behaviors"
                ],
                "summary": "Get session summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.SessionSummary"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/behaviors/stats": {
            "get": {
                "description": "Get statistics about user behaviors",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/behaviors"
                ],
                "summary": "Get behavior statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "sessionId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Event type",
                        "name": "eventType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "URL (partial match)",
                        "name": "url",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339 format)",
                        "name": "startTime",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339 format)",
                        "name": "endTime",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.UserBehaviorStats"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/behaviors/user-events": {
            "get": {
                "description": "Get statistics about user behaviors",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/behaviors"
                ],
                "summary": "Get behavior statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339 format)",
                        "name": "startTime",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339 format)",
                        "name": "endTime",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.UserEventsCountResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/behaviors/users/{userId}/sessions": {
            "get": {
                "description": "Get all sessions for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/behaviors"
                ],
                "summary": "Get user sessions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 50, max: 200)",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (deprecated, use per_page)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset (deprecated, use page)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entity.SessionSummary"
                                            }
                                        },
                                        "pagination": {
                                            "$ref": "#/definitions/entity.PaginationInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/behaviors/{id}": {
            "get": {
                "description": "Get a specific user behavior event by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/behaviors"
                ],
                "summary": "Get behavior by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Behavior ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.UserBehavior"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific user behavior event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/behaviors"
                ],
                "summary": "Delete behavior",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Behavior ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/extension/username/{username}": {
            "get": {
                "description": "Get a specific extension user by their username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/extension"
                ],
                "summary": "Get extension user by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.ExtensionUserPublic"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/extension/users": {
            "get": {
                "description": "Get list of extension users with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/extension"
                ],
                "summary": "Get all extension users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by username",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "isActive",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (starts from 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 20, max: 200)",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (deprecated, use per_page)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset (deprecated, use page)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.PaginatedResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entity.ExtensionUserPublic"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/extension/users/auth": {
            "post": {
                "description": "Validate extension user API key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/inayla/extension"
                ],
                "summary": "Validate API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.ExtensionUserPublic"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/extension/users/generate": {
            "post": {
                "description": "Create a new extension user with API key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/extension"
                ],
                "summary": "Create extension user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateExtensionUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.ExtensionUser"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/extension/users/stats": {
            "get": {
                "description": "Get statistics about extension users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/extension"
                ],
                "summary": "Get extension users statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.ExtensionUserStats"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/extension/users/{id}": {
            "get": {
                "description": "Get a specific extension user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/extension"
                ],
                "summary": "Get extension user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.ExtensionUserPublic"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            },
            "put": {
                "description": "Update extension user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/extension"
                ],
                "summary": "Update extension user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateExtensionUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.ExtensionUserPublic"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an extension user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/extension"
                ],
                "summary": "Delete extension user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/extension/users/{id}/regenerate-key": {
            "post": {
                "description": "Regenerate API key for extension user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/extension"
                ],
                "summary": "Regenerate API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.RegenerateAPIKeyResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/organizations": {
            "get": {
                "description": "Get organization details by ID (user must have access)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/organizations"
                ],
                "summary": "Get organization by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new organization with the authenticated user as admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/organizations"
                ],
                "summary": "Create new organization",
                "parameters": [
                    {
                        "description": "Organization object",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateOrganization"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/organizations/my": {
            "get": {
                "description": "Get list of organizations user has access to",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/organizations"
                ],
                "summary": "Get user's organizations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.UserOrganizations"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/organizations/{id}": {
            "get": {
                "description": "Get organization details by ID (user must have access)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/organizations"
                ],
                "summary": "Get organization by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            },
            "put": {
                "description": "Update organization details (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/organizations"
                ],
                "summary": "Update organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Organization update object",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateOrganization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete organization (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/organizations"
                ],
                "summary": "Delete organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/wrapper.SuccessWrapper"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/organizations/{id}/members": {
            "get": {
                "description": "Get organization details including member list (user must have access)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/organizations"
                ],
                "summary": "Get organization with members",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.OrganizationWithMembers"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/organizations/{id}/users": {
            "post": {
                "description": "Add user to organization (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/organizations"
                ],
                "summary": "Add user to organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User to add",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.AddUserToOrganization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/wrapper.SuccessWrapper"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/organizations/{id}/users/{user_id}": {
            "delete": {
                "description": "Remove user from organization (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/organizations"
                ],
                "summary": "Remove user from organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID to remove",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/wrapper.SuccessWrapper"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/organizations/{id}/users/{user_id}/role": {
            "put": {
                "description": "Update user role in organization (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/organizations"
                ],
                "summary": "Update user role in organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "admin",
                            "member",
                            "viewer"
                        ],
                        "type": "string",
                        "description": "New role",
                        "name": "role",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/wrapper.SuccessWrapper"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/users/logout": {
            "post": {
                "description": "Logout user by clearing authentication cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/users"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.SuccessWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users/profile": {
            "get": {
                "description": "Get user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/users"
                ],
                "summary": "Get user by ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        },
        "/users/profile/full": {
            "get": {
                "description": "Get user profile including their organizations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "/api/v1/admin/users"
                ],
                "summary": "Get user profile with organizations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/wrapper.ResponseWrapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/wrapper.ErrorWrapper"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.AIAnalyticsRequest": {
            "type": "object",
            "required": [
                "deep_work",
                "domains",
                "domains_count",
                "engagement_rate",
                "tracked_hours"
            ],
            "properties": {
                "deep_work": {
                    "$ref": "#/definitions/entity.DeepWorkData"
                },
                "domains": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "domains_count": {
                    "type": "integer",
                    "minimum": 1
                },
                "engagement_rate": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0
                },
                "period": {
                    "type": "string"
                },
                "tracked_hours": {
                    "type": "number",
                    "minimum": 0
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "entity.BatchCreateUserBehaviorRequest": {
            "type": "object",
            "required": [
                "events"
            ],
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.CreateUserBehaviorRequest"
                    }
                }
            }
        },
        "entity.CreateExtensionUserRequest": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "organization_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                }
            }
        },
        "entity.CreateUserBehaviorRequest": {
            "type": "object",
            "required": [
                "sessionId",
                "ts",
                "type"
            ],
            "properties": {
                "key": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "ts": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "x": {
                    "type": "integer"
                },
                "y": {
                    "type": "integer"
                }
            }
        },
        "entity.DeepWorkData": {
            "type": "object",
            "properties": {
                "average_minutes": {
                    "description": "средняя длительность сессии",
                    "type": "number"
                },
                "deep_work_rate": {
                    "description": "% от tracked time",
                    "type": "number"
                },
                "longest_minutes": {
                    "description": "самая длинная сессия",
                    "type": "number"
                },
                "sessions_count": {
                    "description": "количество deep work сессий",
                    "type": "integer"
                },
                "top_domains": {
                    "description": "топ доменов для deep work",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.DeepWorkDomain"
                    }
                },
                "total_hours": {
                    "description": "общее время в часах",
                    "type": "number"
                },
                "total_minutes": {
                    "description": "общее время в deep work",
                    "type": "number"
                }
            }
        },
        "entity.DeepWorkDomain": {
            "type": "object",
            "properties": {
                "domain": {
                    "type": "string"
                },
                "minutes": {
                    "type": "number"
                },
                "sessions": {
                    "type": "integer"
                }
            }
        },
        "entity.DetailedAnalysis": {
            "type": "object",
            "properties": {
                "behavior_insights": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "domain_breakdown": {
                    "$ref": "#/definitions/entity.DomainBreakdown"
                },
                "key_findings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "productivity_score": {
                    "$ref": "#/definitions/entity.ProductivityScore"
                }
            }
        },
        "entity.DomainAnalysis": {
            "type": "object",
            "properties": {
                "analysis": {
                    "$ref": "#/definitions/entity.DetailedAnalysis"
                },
                "focus_insight": {
                    "type": "string"
                },
                "focus_level": {
                    "type": "string"
                },
                "recommendations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "work_pattern": {
                    "type": "string"
                }
            }
        },
        "entity.DomainBreakdown": {
            "type": "object",
            "properties": {
                "communication": {
                    "description": "Gmail, Telegram, etc.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "development": {
                    "description": "localhost, CodeSandbox, etc.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "distractions": {
                    "description": "YouTube, social, etc.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "research": {
                    "description": "Stack Overflow, docs, etc.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "work_tools": {
                    "description": "GitHub, Jira, etc.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "entity.EventTypes": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "event": {
                    "type": "string"
                }
            }
        },
        "entity.ExtensionUser": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "lastUsedAt": {
                    "type": "string"
                },
                "organization": {
                    "$ref": "#/definitions/entity.OrganizationInfo"
                },
                "organization_id": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "entity.ExtensionUserPublic": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "lastUsedAt": {
                    "type": "string"
                },
                "organization": {
                    "$ref": "#/definitions/entity.OrganizationInfo"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "entity.ExtensionUserStats": {
            "type": "object",
            "properties": {
                "activeUsers": {
                    "type": "integer"
                },
                "inactiveUsers": {
                    "type": "integer"
                },
                "totalUsers": {
                    "type": "integer"
                },
                "usersUsedThisWeek": {
                    "type": "integer"
                },
                "usersUsedToday": {
                    "type": "integer"
                }
            }
        },
        "entity.FocusLevelResponse": {
            "type": "object",
            "properties": {
                "focus_level": {
                    "type": "string"
                },
                "insight": {
                    "type": "string"
                },
                "method": {
                    "description": "\"ai\" или \"fallback\"",
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "entity.OrganizationInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entity.PaginatedResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "pagination": {
                    "$ref": "#/definitions/entity.PaginationInfo"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "entity.PaginationInfo": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "entity.PeriodInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "entity.ProductivityScore": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "work/life domains",
                    "type": "integer"
                },
                "efficiency": {
                    "description": "engagement rate",
                    "type": "integer"
                },
                "explanation": {
                    "description": "краткое объяснение счета",
                    "type": "string"
                },
                "focus": {
                    "description": "на основе deep work",
                    "type": "integer"
                },
                "overall": {
                    "description": "0-100",
                    "type": "integer"
                }
            }
        },
        "entity.RegenerateAPIKeyResponse": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "entity.SessionSummary": {
            "type": "object",
            "properties": {
                "duration": {
                    "description": "в секундах",
                    "type": "number"
                },
                "endTime": {
                    "type": "string"
                },
                "eventsCount": {
                    "type": "integer"
                },
                "sessionId": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userId": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "entity.URLStats": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "entity.UpdateExtensionUserRequest": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "organization_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                }
            }
        },
        "entity.UserBehavior": {
            "type": "object",
            "required": [
                "sessionId",
                "ts",
                "type",
                "url"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "ts": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                },
                "x": {
                    "type": "integer"
                },
                "y": {
                    "type": "integer"
                }
            }
        },
        "entity.UserBehaviorStats": {
            "type": "object",
            "properties": {
                "eventsByType": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "popularUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.URLStats"
                    }
                },
                "totalEvents": {
                    "type": "integer"
                },
                "uniqueSessions": {
                    "type": "integer"
                },
                "uniqueUsers": {
                    "type": "integer"
                }
            }
        },
        "entity.UserEventsCountResponse": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.EventTypes"
                    }
                },
                "start_time": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "request.AddUserToOrganization": {
            "type": "object",
            "required": [
                "role",
                "user_id"
            ],
            "properties": {
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "member",
                        "viewer"
                    ]
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "request.CreateOrganization": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "request.CreateUserWithPassword": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "request.UpdateOrganization": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "response.Organization": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "response.OrganizationMember": {
            "type": "object",
            "properties": {
                "joined_at": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "response.OrganizationWithMembers": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.OrganizationMember"
                    }
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "response.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_super_admin": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "response.UserOrgAccess": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "joined_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "response.UserOrganizations": {
            "type": "object",
            "properties": {
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.UserOrgAccess"
                    }
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "wrapper.ErrorWrapper": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "wrapper.PaginatedResponseWrapper": {
            "type": "object",
            "properties": {
                "data": {},
                "meta": {
                    "$ref": "#/definitions/entity.PaginationInfo"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "wrapper.ResponseWrapper": {
            "type": "object",
            "properties": {
                "data": {},
                "success": {
                    "type": "boolean"
                }
            }
        },
        "wrapper.SuccessWrapper": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
